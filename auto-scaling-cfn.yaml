AWSTemplateFormatVersion: "2010-09-09"
Description: Auto Scaling Apache Web Server with ALB and CPU-based Scaling

Parameters:
  VpcCidr:
    Type: String
    Default: 10.20.0.0/16

  PublicSubnetCidr:
    Type: String
    Default: 10.20.1.0/24

  PublicSubnet2Cidr:
    Type: String
    Default: 10.20.3.0/24

  PrivateSubnetCidr:
    Type: String
    Default: 10.20.2.0/24

  PrivateSubnet2Cidr:
    Type: String
    Default: 10.20.4.0/24

  AmiId:
    Type: String
    Description: AMI ID for EC2 instances
    Default: ami-08aa372c213609089

  LabTagValue:
    Type: String
    Default: week3_lab1

  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: AutoScalingLabVPC
        - Key: lab
          Value: !Ref LabTagValue

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access from ALB and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0   # You might want to restrict this for security
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        KeyName: !Ref KeyPairName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y httpd stress
            systemctl start httpd
            systemctl enable httpd
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            echo "<html><body><h1>Hello from $IP / $INSTANCE_ID</h1>" > /var/www/html/index.html
            echo "<button onclick='location.href=\"/stress\"'>Stress CPU</button>" >> /var/www/html/index.html
            # Setup simple stress endpoint
            cat << 'EOF' > /etc/httpd/conf.d/stress.conf
            <Location /stress>
              SetHandler server-status
            </Location>
            EOF
            systemctl restart httpd

      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: lab
              Value: !Ref LabTagValue

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AutoScalingALB
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: lab
          Value: !Ref LabTagValue

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet2
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"
      TargetGroupARNs:
        - !Ref TargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      Cooldown: 300
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: lab
          Value: !Ref LabTagValue
          PropagateAtLaunch: true
        - Key: Name
          Value: AutoScalingInstance
          PropagateAtLaunch: true

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 120

  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm to scale out when CPU > 50%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleOutPolicy

Outputs:
  LoadBalancerDNS:
    Description: ALB DNS Name
    Value: !GetAtt LoadBalancer.DNSName